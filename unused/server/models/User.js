const mongoose = require('mongoose');const bcrypt = require('bcryptjs');const jwt = require('jsonwebtoken');const userSchema = new mongoose.Schema({    firstName: {        type: String,        required: [true, 'First name is required'],        trim: true    },    lastName: {        type: String,        required: [true, 'Last name is required'],        trim: true    },    email: {        type: String,        required: [true, 'Email is required'],        unique: true,        lowercase: true,        trim: true,        match: [/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/, 'Please enter a valid email']    },    password: {        type: String,        required: [true, 'Password is required'],        minlength: [6, 'Password must be at least 6 characters long'],        select: false    },    role: {        type: String,        enum: ['doctor', 'patient', 'admin'],        default: 'patient'    },    isVerified: {        type: Boolean,        default: false    },    verificationToken: String,    resetPasswordToken: String,    resetPasswordExpire: Date,    createdAt: {        type: Date,        default: Date.now    }}, {    timestamps: true});userSchema.pre('save', async function(next) {    if (!this.isModified('password')) {        next();    }    const salt = await bcrypt.genSalt(10);    this.password = await bcrypt.hash(this.password, salt);});userSchema.methods.getSignedJwtToken = function() {    return jwt.sign(        { id: this._id, role: this.role },        process.env.JWT_SECRET,        { expiresIn: process.env.JWT_EXPIRE }    );};userSchema.methods.matchPassword = async function(enteredPassword) {    return await bcrypt.compare(enteredPassword, this.password);};module.exports = mongoose.model('User', userSchema); 