import { NextResponse } from 'next/server';
import { authenticatePatient } from '@/middleware/auth';
import { createApiResponse } from '@/lib/apiResponse';
import { handleErrorWithMockData } from '@/lib/errorHandler';
import { logger } from '@/lib/logger';
import { 
  getPatientMedicalFile, 
  transformMedicalRecords, 
  getMockMedicalRecords 
} from '@/services/backend/patientService';

const log = logger('MedicalRecordsAPI');

/**
 * GET handler for /api/patient/medical-records
 * Fetches and transforms patient medical records
 */
export async function GET(request) {
  log.info('Processing GET request for /api/patient/medical-records');
  log.time('medical-records-request');
  
  // Authenticate the patient
  const auth = await authenticatePatient(request);
  if (!auth.isAuthenticated) {
    log.warn('Authentication failed');
    return auth.response;
  }
  
  try {
    log.debug(`Authenticated as patient with ID: ${auth.userId}`);
    
    // Get the patient's medical file
    const medicalFileResult = await getPatientMedicalFile(auth.userId);
    
    if (!medicalFileResult.success) {
      log.warn(`Failed to retrieve medical file: ${medicalFileResult.error}`);
      return createApiResponse(
        { error: medicalFileResult.error, message: medicalFileResult.message },
        medicalFileResult.status,
        { 'x-error-type': 'database_error' }
      );
    }
    
    // Transform the medical file data into the format expected by the frontend
    const records = await transformMedicalRecords(medicalFileResult.data);
    
    log.info(`Successfully retrieved and transformed ${records.length} medical records`);
    log.timeEnd('medical-records-request');
    
    // Return the transformed records
    return createApiResponse(
      records,
      200,
      {
        'x-data-source': 'mongodb',
        'x-data-completeness': 'full',
        'x-record-count': records.length.toString()
      }
    );
  } catch (error) {
    log.error(`Error processing medical records request: ${error.message}`, error);
    log.timeEnd('medical-records-request');
    
    // Fall back to mock data
    const { data, status, headers } = handleErrorWithMockData(
      error, 
      getMockMedicalRecords,
      'Medical Records API'
    );
    
    return createApiResponse(data, status, headers);
  }
}

/**
 * OPTIONS handler for CORS
 */
export async function OPTIONS() {
  return createApiResponse(
    {},
    200,
    {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    }
  );
}
