import { NextResponse } from 'next/server';
import { createApiResponse } from '@/lib/apiResponse';
import { logger } from '@/lib/logger';
import { authenticateUser } from '@/middleware/auth';
import { 
  getMedicineReminders, 
  getMockMedicineReminders, 
  updateMedicineReminder 
} from '@/services/medicineReminderService';

const log = logger('MedicineRemindersAPI');

export async function OPTIONS(request) {
  return createApiResponse({
    success: true,
    status: 200
  });
}

export async function GET(request) {
  log.debug('Medicine reminders GET request received');
  log.time('request-total');
  
  try {
    // Authenticate the user
    const authResult = await authenticateUser(request);
    if (!authResult.success) {
      log.warn(`Authentication failed: ${authResult.error}`);
      log.timeEnd('request-total');
      return createApiResponse(authResult);
    }
    
    const { userId, role } = authResult.user;
    log.debug(`Authenticated ${role} with ID: ${userId}`);

    // Only patients and admins can access medicine reminders
    if (role !== 'patient' && role !== 'admin') {
      log.warn(`Unauthorized role: ${role}`);
      log.timeEnd('request-total');
      return createApiResponse({
        success: false,
        error: 'Forbidden',
        message: 'Only patients can access their medicine reminders',
        status: 403
      });
    }
    
    // Determine the patient ID (for admin users, it comes from query params)
    let patientId = userId;
    if (role === 'admin') {
      const url = new URL(request.url);
      patientId = url.searchParams.get('patientId');
      
      if (!patientId) {
        log.warn('Admin user did not provide patientId');
        log.timeEnd('request-total');
        return createApiResponse({
          success: false,
          error: 'Bad Request',
          message: 'Patient ID is required for admin users',
          status: 400
        });
      }
    }
    
    try {
      // Get medicine reminders using the service layer
      const result = await getMedicineReminders(patientId);
      log.timeEnd('request-total');
      return createApiResponse(result);
    } catch (error) {
      log.error(`Error in medicine reminders service: ${error.message}`, error);
      log.timeEnd('request-total');
      
      // Fallback to mock data on error
      log.info('Falling back to mock medicine reminders data');
      const mockResult = getMockMedicineReminders(patientId);
      return createApiResponse({
        ...mockResult,
        headers: { 
          ...mockResult.headers,
          'x-fallback-reason': 'service_error'
        }
      });
    }
  } catch (error) {
    log.error(`Unexpected error in medicine reminders API: ${error.message}`, error);
    log.timeEnd('request-total');
    
    return createApiResponse({
      success: false,
      error: 'Internal Server Error',
      message: error.message,
      status: 500,
      headers: { 'x-error-type': 'unexpected_error' }
    });
  }
}

export async function PATCH(request) {
  log.debug('Medicine reminders PATCH request received');
  log.time('request-total');
  
  try {
    // Authenticate the user
    const authResult = await authenticateUser(request);
    if (!authResult.success) {
      log.warn(`Authentication failed: ${authResult.error}`);
      log.timeEnd('request-total');
      return createApiResponse(authResult);
    }
    
    const { userId, role } = authResult.user;
    log.debug(`Authenticated ${role} with ID: ${userId}`);

    // Only patients can update their medicine reminders
    if (role !== 'patient') {
      log.warn(`Unauthorized role: ${role}`);
      log.timeEnd('request-total');
      return createApiResponse({
        success: false,
        error: 'Forbidden',
        message: 'Only patients can update their medicine reminders',
        status: 403
      });
    }
    
    try {
      // Parse request body
      const data = await request.json();
      
      // Update medicine reminder using the service layer
      const result = await updateMedicineReminder(userId, data);
      log.timeEnd('request-total');
      return createApiResponse(result);
    } catch (error) {
      log.error(`Error in medicine reminder update service: ${error.message}`, error);
      log.timeEnd('request-total');
      
      return createApiResponse({
        success: false,
        error: 'Failed to update medicine reminder',
        message: error.message,
        status: 500,
        headers: { 'x-error-type': 'service_error' }
      });
    }
  } catch (error) {
    log.error(`Unexpected error in medicine reminders API: ${error.message}`, error);
    log.timeEnd('request-total');
    
    return createApiResponse({
      success: false,
      error: 'Internal Server Error',
      message: error.message,
      status: 500,
      headers: { 'x-error-type': 'unexpected_error' }
    });
  }
}
