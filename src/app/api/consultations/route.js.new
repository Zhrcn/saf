import { NextResponse } from 'next/server';
import { createApiResponse } from '@/lib/apiResponse';
import { logger } from '@/lib/logger';
import { authenticateUser } from '@/middleware/auth';
import { 
  getConsultations, 
  getMockConsultations, 
  createConsultation, 
  updateConsultation 
} from '@/services/consultationService';

const log = logger('ConsultationsAPI');

export async function OPTIONS(request) {
  return createApiResponse({
    success: true,
    status: 200
  });
}

export async function GET(request) {
  log.debug('Consultations GET request received');
  log.time('request-total');
  
  try {
    // Authenticate the user
    const authResult = await authenticateUser(request);
    if (!authResult.success) {
      log.warn(`Authentication failed: ${authResult.error}`);
      log.timeEnd('request-total');
      return createApiResponse(authResult);
    }
    
    const { userId, role } = authResult.user;
    log.debug(`Authenticated ${role} with ID: ${userId}`);

    // Extract query parameters
    const url = new URL(request.url);
    const params = {};
    
    // Extract all relevant query parameters
    for (const [key, value] of url.searchParams.entries()) {
      params[key] = value;
    }
    
    try {
      // Get consultations using the service layer
      const result = await getConsultations(params, userId, role);
      log.timeEnd('request-total');
      return createApiResponse(result);
    } catch (error) {
      log.error(`Error in consultations service: ${error.message}`, error);
      log.timeEnd('request-total');
      
      // Fallback to mock data on error
      log.info('Falling back to mock consultations data');
      const mockResult = getMockConsultations(params, userId, role);
      return createApiResponse({
        ...mockResult,
        headers: { 
          ...mockResult.headers,
          'x-fallback-reason': 'service_error'
        }
      });
    }
  } catch (error) {
    log.error(`Unexpected error in consultations API: ${error.message}`, error);
    log.timeEnd('request-total');
    
    return createApiResponse({
      success: false,
      error: 'Internal Server Error',
      message: error.message,
      status: 500,
      headers: { 'x-error-type': 'unexpected_error' }
    });
  }
}

export async function POST(request) {
  log.debug('Consultations POST request received');
  log.time('request-total');
  
  try {
    // Authenticate the user
    const authResult = await authenticateUser(request);
    if (!authResult.success) {
      log.warn(`Authentication failed: ${authResult.error}`);
      log.timeEnd('request-total');
      return createApiResponse(authResult);
    }
    
    const { userId, role } = authResult.user;
    log.debug(`Authenticated ${role} with ID: ${userId}`);
    
    try {
      // Parse request body
      const data = await request.json();
      
      // Create consultation using the service layer
      const result = await createConsultation(data, userId, role);
      log.timeEnd('request-total');
      return createApiResponse(result);
    } catch (error) {
      log.error(`Error in consultation creation service: ${error.message}`, error);
      log.timeEnd('request-total');
      
      return createApiResponse({
        success: false,
        error: 'Failed to create consultation',
        message: error.message,
        status: 500,
        headers: { 'x-error-type': 'service_error' }
      });
    }
  } catch (error) {
    log.error(`Unexpected error in consultations API: ${error.message}`, error);
    log.timeEnd('request-total');
    
    return createApiResponse({
      success: false,
      error: 'Internal Server Error',
      message: error.message,
      status: 500,
      headers: { 'x-error-type': 'unexpected_error' }
    });
  }
}

export async function PATCH(request) {
  log.debug('Consultations PATCH request received');
  log.time('request-total');
  
  try {
    // Authenticate the user
    const authResult = await authenticateUser(request);
    if (!authResult.success) {
      log.warn(`Authentication failed: ${authResult.error}`);
      log.timeEnd('request-total');
      return createApiResponse(authResult);
    }
    
    const { userId, role } = authResult.user;
    log.debug(`Authenticated ${role} with ID: ${userId}`);
    
    try {
      // Extract consultation ID from URL
      const url = new URL(request.url);
      const paths = url.pathname.split('/');
      const consultationId = paths[paths.length - 1];
      
      if (!consultationId || consultationId === 'consultations') {
        log.warn('Missing consultation ID in PATCH request');
        log.timeEnd('request-total');
        return createApiResponse({
          success: false,
          error: 'Missing consultation ID',
          message: 'Consultation ID is required',
          status: 400
        });
      }
      
      // Parse request body
      const data = await request.json();
      
      // Update consultation using the service layer
      const result = await updateConsultation(consultationId, data, userId, role);
      log.timeEnd('request-total');
      return createApiResponse(result);
    } catch (error) {
      log.error(`Error in consultation update service: ${error.message}`, error);
      log.timeEnd('request-total');
      
      return createApiResponse({
        success: false,
        error: 'Failed to update consultation',
        message: error.message,
        status: 500,
        headers: { 'x-error-type': 'service_error' }
      });
    }
  } catch (error) {
    log.error(`Unexpected error in consultations API: ${error.message}`, error);
    log.timeEnd('request-total');
    
    return createApiResponse({
      success: false,
      error: 'Internal Server Error',
      message: error.message,
      status: 500,
      headers: { 'x-error-type': 'unexpected_error' }
    });
  }
}
