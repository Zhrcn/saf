import { NextResponse } from 'next/server';
import { createApiResponse } from '@/lib/apiResponse';
import { logger } from '@/lib/logger';
import { authenticateUser } from '@/middleware/auth';
import { getAppointments, getMockAppointments } from '@/services/appointmentService';

const log = logger('AppointmentsAPI');

export async function OPTIONS(request) {
  return createApiResponse({
    success: true,
    status: 200
  });
}

export async function GET(request) {
  log.debug('Appointments GET request received');
  log.time('request-total');
  
  try {
    // Authenticate the user
    const authResult = await authenticateUser(request);
    if (!authResult.success) {
      log.warn(`Authentication failed: ${authResult.error}`);
      log.timeEnd('request-total');
      return createApiResponse(authResult);
    }
    
    const { userId, role } = authResult.user;
    log.debug(`Authenticated ${role} with ID: ${userId}`);

    // Extract query parameters
    const url = new URL(request.url);
    const params = {};
    
    // Extract all relevant query parameters
    for (const [key, value] of url.searchParams.entries()) {
      params[key] = value;
    }
    
    try {
      // Get appointments using the service layer
      const result = await getAppointments(params, userId, role);
      log.timeEnd('request-total');
      return createApiResponse(result);
    } catch (error) {
      log.error(`Error in appointments service: ${error.message}`, error);
      log.timeEnd('request-total');
      
      // Fallback to mock data on error
      log.info('Falling back to mock appointments data');
      const mockResult = getMockAppointments(params, userId, role);
      return createApiResponse({
        ...mockResult,
        headers: { 
          ...mockResult.headers,
          'x-fallback-reason': 'service_error'
        }
      });
    }
  } catch (error) {
    log.error(`Unexpected error in appointments API: ${error.message}`, error);
    log.timeEnd('request-total');
    
    return createApiResponse({
      success: false,
      error: 'Internal Server Error',
      message: error.message,
      status: 500,
      headers: { 'x-error-type': 'unexpected_error' }
    });
  }
}

export async function POST(request) {
  // This would be implemented similarly to GET but for creating appointments
  // For now, return a not implemented response
  return createApiResponse({
    success: false,
    error: 'Not Implemented',
    message: 'POST method not yet implemented',
    status: 501
  });
}

export async function PATCH(request) {
  // This would be implemented similarly to POST but for updating appointments
  // For now, return a not implemented response
  return createApiResponse({
    success: false,
    error: 'Not Implemented',
    message: 'PATCH method not yet implemented',
    status: 501
  });
}
