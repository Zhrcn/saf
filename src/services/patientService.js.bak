export async function getHealthMetrics() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock health metrics data');
            return getMockHealthMetrics();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient health metrics...');
        }

        const response = await fetch('/api/health-metrics', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Health metrics response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Health metrics endpoint not found (404), using mock data');
                return getMockHealthMetrics();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockHealthMetrics();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockHealthMetrics();
            }
        }

        try {
            const data = await response.json();
            return data;
        } catch (jsonError) {
            console.error('Error parsing health metrics response:', jsonError);
            return getMockHealthMetrics();
        }
    } catch (error) {
        console.error('Error fetching health metrics:', error);
        return getMockHealthMetrics();
    }
}

function getMockHealthMetrics() {
    const today = new Date();
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    const heartRateData = [];
    const bloodPressureData = [];
    const bloodSugarData = [];
    
    for (let i = 0; i < 7; i++) {
        const date = new Date(lastWeek);
        date.setDate(date.getDate() + i);
        const dateStr = date.toISOString().split('T')[0];
        
        heartRateData.push({
            date: dateStr,
            value: Math.floor(Math.random() * 40) + 60
        });
        
        bloodPressureData.push({
            date: dateStr,
            systolic: Math.floor(Math.random() * 40) + 110,
            diastolic: Math.floor(Math.random() * 30) + 70
        });
        
        bloodSugarData.push({
            date: dateStr,
            value: Math.floor(Math.random() * 50) + 80
        });
    }
    
    return {
        heartRate: {
            current: heartRateData[heartRateData.length - 1].value,
            data: heartRateData,
            unit: 'bpm',
            normalRange: '60-100',
            status: 'normal'
        },
        bloodPressure: {
            current: {
                systolic: bloodPressureData[bloodPressureData.length - 1].systolic,
                diastolic: bloodPressureData[bloodPressureData.length - 1].diastolic
            },
            data: bloodPressureData,
            unit: 'mmHg',
            normalRange: '90-120/60-80',
            status: 'normal'
        },
        bloodSugar: {
            current: bloodSugarData[bloodSugarData.length - 1].value,
            data: bloodSugarData,
            unit: 'mg/dL',
            normalRange: '70-140',
            status: 'normal'
        },
        weight: {
            current: 70.5,
            unit: 'kg',
            history: [
                { date: addDays(today, -30).toISOString().split('T')[0], value: 71.2 },
                { date: addDays(today, -15).toISOString().split('T')[0], value: 70.8 },
                { date: today.toISOString().split('T')[0], value: 70.5 }
            ]
        },
        bmi: {
            current: 22.3,
            status: 'normal',
            normalRange: '18.5-24.9'
        },
        lastUpdated: today.toISOString()
    };
}

export async function getPrescriptions() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock prescription data');
            return getMockPrescriptions();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient prescriptions...');
        }

        const response = await fetch('/api/prescriptions', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Prescriptions response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Prescriptions endpoint not found (404), using mock data');
                return getMockPrescriptions();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockPrescriptions();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockPrescriptions();
            }
        }

        try {
            const data = await response.json();
            return data.prescriptions || [];
        } catch (jsonError) {
            console.error('Error parsing prescriptions response:', jsonError);
            return getMockPrescriptions();
        }
    } catch (error) {
        console.error('Error fetching prescriptions:', error);
        return getMockPrescriptions();
    }
}

function getMockPrescriptions() {
    const today = new Date();
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    const lastMonth = new Date(today);
    lastMonth.setDate(lastMonth.getDate() - 30);
    
    return [
        {
            id: 1,
            medication: 'Amoxicillin',
            dosage: '500mg',
            frequency: 'Three times daily',
            startDate: lastWeek.toISOString().split('T')[0],
            endDate: addDays(lastWeek, 10).toISOString().split('T')[0],
            doctorName: 'Dr. Michael Chen',
            doctorSpecialty: 'General Practitioner',
            instructions: 'Take with food. Complete the full course even if symptoms improve.',
            status: 'Active',
            refills: 0,
            issueDate: lastWeek.toISOString().split('T')[0]
        },
        {
            id: 2,
            medication: 'Lisinopril',
            dosage: '10mg',
            frequency: 'Once daily',
            startDate: lastMonth.toISOString().split('T')[0],
            endDate: addDays(today, 60).toISOString().split('T')[0],
            doctorName: 'Dr. Sarah Johnson',
            doctorSpecialty: 'Cardiologist',
            instructions: 'Take in the morning with or without food.',
            status: 'Active',
            refills: 2,
            issueDate: lastMonth.toISOString().split('T')[0]
        },
        {
            id: 3,
            medication: 'Ibuprofen',
            dosage: '400mg',
            frequency: 'As needed for pain, not exceeding 3 times daily',
            startDate: lastMonth.toISOString().split('T')[0],
            endDate: lastWeek.toISOString().split('T')[0],
            doctorName: 'Dr. James Wilson',
            doctorSpecialty: 'Orthopedic Surgeon',
            instructions: 'Take with food to reduce stomach irritation. Do not take for more than 10 days.',
            status: 'Expired',
            refills: 0,
            issueDate: lastMonth.toISOString().split('T')[0]
        }
    ];
}

function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}

export async function getConsultations() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock consultation data');
            return getMockConsultations();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient consultations...');
        }

        const response = await fetch('/api/consultations', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Consultations response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Consultations endpoint not found (404), using mock data');
                return getMockConsultations();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockConsultations();
            } catch (jsonError) {
                // If JSON parsing fails, log the error and fall back to mock data
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockConsultations();
            }
        }

        try {
            const data = await response.json();
            return data.consultations || [];
        } catch (jsonError) {
            console.error('Error parsing consultations response:', jsonError);
            return getMockConsultations();
        }
    } catch (error) {
        console.error('Error fetching consultations:', error);
        return getMockConsultations();
    }
}

/**
 * Get mock consultation data for fallback
 * @returns {Array} Mock consultation data
 */
function getMockConsultations() {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    const twoWeeksAgo = new Date(today);
    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
    
    return [
        {
            id: 1,
            doctorId: 101,
            doctorName: 'Dr. Sarah Johnson',
            doctorSpecialty: 'Cardiologist',
            date: yesterday.toISOString().split('T')[0],
            time: '10:30 AM',
            status: 'Completed',
            reason: 'Heart palpitations and chest discomfort',
            notes: 'EKG performed, results normal. Recommended stress test.',
            recommendations: 'Reduce caffeine intake, monitor blood pressure daily, schedule stress test.',
            attachments: [
                { name: 'EKG_Results.pdf', url: '/mock-files/ekg.pdf' }
            ],
            createdAt: lastWeek.toISOString()
        },
        {
            id: 2,
            doctorId: 102,
            doctorName: 'Dr. Michael Chen',
            doctorSpecialty: 'General Practitioner',
            date: lastWeek.toISOString().split('T')[0],
            time: '09:15 AM',
            status: 'Completed',
            reason: 'Annual physical examination',
            notes: 'All vitals normal. Blood work ordered.',
            recommendations: 'Continue current medications, follow up in 3 months.',
            attachments: [
                { name: 'Physical_Exam_Summary.pdf', url: '/mock-files/physical.pdf' },
                { name: 'Blood_Work_Order.pdf', url: '/mock-files/blood-work.pdf' }
            ],
            createdAt: lastWeek.toISOString()
        },
        {
            id: 3,
            doctorId: 103,
            doctorName: 'Dr. Emily Rodriguez',
            doctorSpecialty: 'Dermatologist',
            date: twoWeeksAgo.toISOString().split('T')[0],
            time: '02:00 PM',
            status: 'Completed',
            reason: 'Skin rash and itching',
            notes: 'Diagnosed with contact dermatitis. Prescribed topical steroid cream.',
            recommendations: 'Apply cream twice daily, avoid known allergens, follow up in 2 weeks if not improved.',
            attachments: [],
            createdAt: twoWeeksAgo.toISOString()
        }
    ];
}

/**
 * Schedule a new appointment for the patient
 * @param {Object} appointment - The appointment data
 * @returns {Promise<Object>} The created appointment or error response
 */
export async function scheduleAppointment(appointment) {
    try {
        // Only log detailed data in development
        if (process.env.NODE_ENV !== 'production') {
            console.log('Full appointment data received:', appointment);
        }
        
        // Handle both snake_case and camelCase field names
        const doctorId = appointment.doctorId || appointment.doctor_id;
        const reason = appointment.reason || appointment.reasonForVisit;
        const timeSlot = appointment.timeSlot || appointment.time_slot;
        const date = appointment.date || appointment.appointment_date;
        
        // Validate required fields
        if (!doctorId) {
            return {
                success: false,
                error: 'Please select a doctor',
                errorCode: 'VALIDATION_ERROR'
            };
        }
        if (!reason) {
            return {
                success: false,
                error: 'Please provide a reason for the appointment',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock appointment response');
            return getMockScheduleAppointmentResponse(appointment);
        }

        const patientId = getCurrentUserId();
        if (!patientId) {
            console.warn('Could not determine patient ID from token, returning mock appointment response');
            return getMockScheduleAppointmentResponse(appointment);
        }

        // Map time slot to actual time ranges
        let startTime, endTime;
        switch(timeSlot) {
            case 'morning':
                startTime = '09:00';
                endTime = '12:00';
                break;
            case 'afternoon':
                startTime = '13:00';
                endTime = '17:00';
                break;
            case 'evening':
                startTime = '18:00';
                endTime = '21:00';
                break;
            default:
                startTime = '09:00';
                endTime = '12:00';
        }

        const appointmentData = {
            doctor_id: doctorId, // Using snake_case to match backend expectations
            patient_id: patientId,
            reason: reason,
            status: 'pending',  // Initial status is pending until doctor accepts
            time_slot: timeSlot || 'any',  // Patient's preferred time (morning/afternoon/evening)
            notes: appointment.notes || '',
            follow_up: appointment.followUp || false,
            date: date
        };

        // Log processed data in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log('Processed appointment data:', appointmentData);
        }

        try {
            const response = await fetch('/api/appointments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(appointmentData)
            });

            let responseData;
            try {
                // Try to get response as text first to help with debugging
                const responseText = await response.text();
                
                // Only log in development
                if (process.env.NODE_ENV !== 'production') {
                    console.log('Response from server:', responseText);
                }
                
                // Parse the text response as JSON
                responseData = responseText ? JSON.parse(responseText) : {};
            } catch (parseError) {
                console.error('Error parsing server response:', parseError);
                return {
                    success: false,
                    error: 'Invalid server response format',
                    errorCode: 'PARSE_ERROR'
                };
            }

            if (!response.ok) {
                console.error('Backend error details:', responseData);
                return {
                    success: false,
                    error: responseData.error || responseData.message || `Server error: ${response.status}`,
                    errorCode: responseData.errorCode || 'API_ERROR',
                    status: response.status
                };
            }

            return {
                success: true,
                data: responseData,
                message: 'Appointment scheduled successfully'
            };
        } catch (fetchError) {
            console.error('Network error in scheduleAppointment:', fetchError);
            // Fall back to mock data for network errors
            return getMockScheduleAppointmentResponse(appointment);
        }
    } catch (error) {
        console.error('Error in scheduleAppointment:', error);
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

/**
 * Generate a mock response for scheduling an appointment
 * @param {Object} appointment - The appointment data that was submitted
 * @returns {Object} A mock success response
 */
function getMockScheduleAppointmentResponse(appointment) {
    const now = new Date();
    const doctorId = appointment.doctorId || appointment.doctor_id || 101;
    const appointmentId = Math.floor(Math.random() * 10000) + 1;
    
    // Try to get doctor info from localStorage if available
    let doctorName = 'Dr. Sarah Johnson';
    let doctorSpecialty = 'Cardiologist';
    
    try {
        // Check if we have doctors data in localStorage
        const doctorsDataStr = localStorage.getItem('safe_doctors_data');
        if (doctorsDataStr) {
            const doctorsData = JSON.parse(doctorsDataStr);
            const doctor = doctorsData.find(d => d.id === doctorId || d.id === parseInt(doctorId));
            if (doctor) {
                doctorName = doctor.name || `Dr. ${doctor.firstName} ${doctor.lastName}`;
                doctorSpecialty = doctor.specialty;
            }
        }
    } catch (e) {
        console.warn('Could not retrieve doctor data from localStorage:', e);
    }
    
    return {
        success: true,
        message: 'Appointment scheduled successfully (mock data)',
        data: {
            id: appointmentId,
            doctor_id: doctorId,
            doctorName: doctorName,
            doctorSpecialty: doctorSpecialty,
            reason: appointment.reason || appointment.reasonForVisit || 'General checkup',
            status: 'pending',
            time_slot: appointment.timeSlot || appointment.time_slot || 'morning',
            date: appointment.date || appointment.appointment_date || new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            notes: appointment.notes || '',
            follow_up: appointment.followUp || false,
            created_at: now.toISOString(),
            updated_at: now.toISOString()
        }
    };
}

/**
 * Cancel an existing appointment
 * @param {number} id - The appointment ID to cancel
 * @param {string} reason - Optional reason for cancellation
 * @returns {Promise<Object>} Response with success/error information
 */
export async function cancelAppointment(id, reason = '') {
    try {
        if (!id) {
            return {
                success: false,
                error: 'Appointment ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock cancel response');
            return getMockCancelAppointmentResponse(id, reason);
        }

        // Log the request in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log(`Cancelling appointment ${id} with reason: ${reason || 'Not provided'}`);
        }

        try {
            const response = await fetch(`/api/appointments/${id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({
                    status: 'Cancelled',
                    notes: {
                        patient: reason || 'Cancelled by patient'
                    }
                })
            });

            // Log the response status in development only
            if (process.env.NODE_ENV !== 'production') {
                console.log(`Cancel appointment ${id} response status:`, response.status);
            }

            if (!response.ok) {
                // Handle 404 or other non-JSON responses gracefully
                if (response.status === 404) {
                    console.warn(`Appointment ${id} not found (404), using mock response`);
                    return getMockCancelAppointmentResponse(id, reason);
                }
                
                // For other errors, try to parse JSON if possible
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to cancel appointment',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    // If JSON parsing fails, log the error and fall back to mock data
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockCancelAppointmentResponse(id, reason);
                }
            }

            try {
                const data = await response.json();
                return {
                    success: true,
                    data: data,
                    message: 'Appointment cancelled successfully'
                };
            } catch (jsonError) {
                console.error(`Error parsing cancel response for appointment ${id}:`, jsonError);
                return getMockCancelAppointmentResponse(id, reason);
            }
        } catch (fetchError) {
            console.error('Network error in cancelAppointment:', fetchError);
            // Fall back to mock data for network errors
            return getMockCancelAppointmentResponse(id, reason);
        }
    } catch (error) {
        console.error('Error cancelling appointment:', error);
        // Fall back to mock data instead of throwing the error
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

/**
 * Generate a mock response for cancelling an appointment
 * @param {number} id - The appointment ID that was cancelled
 * @param {string} reason - The reason for cancellation
 * @returns {Object} A mock success response
 */
function getMockCancelAppointmentResponse(id, reason) {
    const now = new Date();
    
    return {
        success: true,
        message: 'Appointment cancelled successfully (mock data)',
        data: {
            id: parseInt(id),
            status: 'Cancelled',
            notes: {
                patient: reason || 'Cancelled by patient'
            },
            updated_at: now.toISOString()
        }
    };
}

/**
 * Update an existing appointment
 * @param {number} id - The appointment ID to update
 * @param {Object} data - The updated appointment data
 * @returns {Promise<Object>} Response with success/error information
 */
export async function updateAppointment(id, data) {
    try {
        if (!id) {
            return {
                success: false,
                error: 'Appointment ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        if (!data || Object.keys(data).length === 0) {
            return {
                success: false,
                error: 'No update data provided',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock update response');
            return getMockUpdateAppointmentResponse(id, data);
        }

        // Create a copy of data to avoid modifying the original
        const updateData = { ...data };

        // Map time slot to actual time if provided
        if (updateData.timeSlot) {
            let appointmentTime;
            switch (updateData.timeSlot) {
                case 'morning':
                    appointmentTime = '09:00 AM';
                    break;
                case 'afternoon':
                    appointmentTime = '01:00 PM';
                    break;
                case 'evening':
                    appointmentTime = '06:00 PM';
                    break;
                default:
                    appointmentTime = '09:00 AM';
            }
            updateData.time = appointmentTime;
            updateData.time_slot = updateData.timeSlot; // Keep time_slot for backend compatibility
        }

        // Handle reason field naming differences
        if (updateData.reason && !updateData.reasonForVisit) {
            updateData.reasonForVisit = updateData.reason;
        }

        // Log the request in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log(`Updating appointment ${id} with data:`, updateData);
        }

        try {
            const response = await fetch(`/api/appointments/${id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(updateData)
            });

            // Log the response status in development only
            if (process.env.NODE_ENV !== 'production') {
                console.log(`Update appointment ${id} response status:`, response.status);
            }

            if (!response.ok) {
                // Handle 404 or other non-JSON responses gracefully
                if (response.status === 404) {
                    console.warn(`Appointment ${id} not found (404), using mock response`);
                    return getMockUpdateAppointmentResponse(id, updateData);
                }
                
                // For other errors, try to parse JSON if possible
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to update appointment',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    // If JSON parsing fails, log the error and fall back to mock data
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockUpdateAppointmentResponse(id, updateData);
                }
            }

            try {
                const data = await response.json();
                return {
                    success: true,
                    data: data,
                    message: 'Appointment updated successfully'
                };
            } catch (jsonError) {
                console.error(`Error parsing update response for appointment ${id}:`, jsonError);
                return getMockUpdateAppointmentResponse(id, updateData);
            }
        } catch (fetchError) {
            console.error('Network error in updateAppointment:', fetchError);
            // Fall back to mock data for network errors
            return getMockUpdateAppointmentResponse(id, updateData);
        }
    } catch (error) {
        console.error('Error updating appointment:', error);
        // Fall back to mock data instead of throwing the error
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

/**
 * Generate a mock response for updating an appointment
 * @param {number} id - The appointment ID that was updated
 * @param {Object} updateData - The data that was used to update the appointment
 * @returns {Object} A mock success response
 */
function getMockUpdateAppointmentResponse(id, updateData) {
    const now = new Date();
    
    // Try to get existing appointment data from localStorage if available
    let existingAppointment = {
        id: parseInt(id),
        doctor_id: 101,
        doctorName: 'Dr. Sarah Johnson',
        doctorSpecialty: 'Cardiologist',
        reason: 'General checkup',
        status: 'Scheduled',
        time_slot: 'morning',
        date: new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
        notes: '',
        follow_up: false,
        created_at: new Date(now.getTime() - 24 * 60 * 60 * 1000).toISOString(),
        updated_at: now.toISOString()
    };
    
    try {
        // Check if we have appointments data in localStorage
        const appointmentsDataStr = localStorage.getItem('safe_appointments_data');
        if (appointmentsDataStr) {
            const appointmentsData = JSON.parse(appointmentsDataStr);
            const appointment = appointmentsData.find(a => a.id === parseInt(id));
            if (appointment) {
                existingAppointment = { ...existingAppointment, ...appointment };
            }
        }
    } catch (e) {
        console.warn('Could not retrieve appointment data from localStorage:', e);
    }
    
    // Merge the existing appointment with the update data
    const updatedAppointment = { ...existingAppointment };
    
    // Apply updates from updateData
    if (updateData.date) updatedAppointment.date = updateData.date;
    if (updateData.time_slot) updatedAppointment.time_slot = updateData.time_slot;
    if (updateData.timeSlot) updatedAppointment.time_slot = updateData.timeSlot;
    if (updateData.reason) updatedAppointment.reason = updateData.reason;
    if (updateData.reasonForVisit) updatedAppointment.reason = updateData.reasonForVisit;
    if (updateData.notes) updatedAppointment.notes = updateData.notes;
    if (updateData.status) updatedAppointment.status = updateData.status;
    if (updateData.follow_up !== undefined) updatedAppointment.follow_up = updateData.follow_up;
    if (updateData.followUp !== undefined) updatedAppointment.follow_up = updateData.followUp;
    
    updatedAppointment.updated_at = now.toISOString();
    
    return {
        success: true,
        message: 'Appointment updated successfully (mock data)',
        data: updatedAppointment
    };
}

/**
 * Get medical providers by type
 * @param {string} type - The type of medical providers to fetch (all, hospitals, clinics, pharmacies)
 * @returns {Promise<Object>} Medical providers data or mock data on error
 */
export async function getMedicalProviders(type = 'all') {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock medical providers data');
            return getMockMedicalProviders(type);
        }

        // Log the request in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log(`Fetching medical providers (type: ${type})...`);
        }

        const response = await fetch('/api/medical-providers', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        // Log the response status in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log('Medical providers response status:', response.status);
        }

        if (!response.ok) {
            // Handle 404 or other non-JSON responses gracefully
            if (response.status === 404) {
                console.warn('Medical providers endpoint not found (404), using mock data');
                return getMockMedicalProviders(type);
            }
            
            // For other errors, try to parse JSON if possible
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                // Fall back to mock data for other errors
                return getMockMedicalProviders(type);
            } catch (jsonError) {
                // If JSON parsing fails, log the error and fall back to mock data
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockMedicalProviders(type);
            }
        }

        try {
            const data = await response.json();
            return data.providers || {};
        } catch (jsonError) {
            console.error('Error parsing medical providers response:', jsonError);
            return getMockMedicalProviders(type);
        }
    } catch (error) {
        console.error('Error fetching medical providers:', error);
        // Fall back to mock data instead of throwing the error
        return getMockMedicalProviders(type);
    }
}

/**
 * Get mock medical providers data for fallback
 * @param {string} type - The type of medical providers to return
 * @returns {Object} Mock medical providers data
 */
function getMockMedicalProviders(type = 'all') {
    const hospitals = [
        {
            id: 201,
            name: 'Main Hospital',
            address: '123 Main St, Cityville, ST 12345',
            phone: '+1 (555) 123-4567',
            rating: 4.7,
            specialties: ['Cardiology', 'Neurology', 'Orthopedics', 'General Surgery'],
            emergency: true,
            image: '/images/hospitals/hospital1.jpg'
        },
        {
            id: 202,
            name: 'Community Medical Center',
            address: '456 Oak Ave, Townsville, ST 12346',
            phone: '+1 (555) 234-5678',
            rating: 4.5,
            specialties: ['Pediatrics', 'Obstetrics', 'Family Medicine'],
            emergency: true,
            image: '/images/hospitals/hospital2.jpg'
        }
    ];
    
    const clinics = [
        {
            id: 301,
            name: 'Family Health Clinic',
            address: '789 Pine Rd, Villageton, ST 12347',
            phone: '+1 (555) 345-6789',
            rating: 4.8,
            specialties: ['Family Medicine', 'Preventive Care'],
            walkIn: true,
            image: '/images/clinics/clinic1.jpg'
        },
        {
            id: 302,
            name: 'Dermatology Clinic',
            address: '101 Elm St, Hamletville, ST 12348',
            phone: '+1 (555) 456-7890',
            rating: 4.9,
            specialties: ['Dermatology'],
            walkIn: false,
            image: '/images/clinics/clinic2.jpg'
        }
    ];
    
    const pharmacies = [
        {
            id: 401,
            name: 'City Pharmacy',
            address: '222 Maple Ave, Cityville, ST 12345',
            phone: '+1 (555) 567-8901',
            rating: 4.6,
            hours: '8:00 AM - 9:00 PM',
            delivery: true,
            image: '/images/pharmacies/pharmacy1.jpg'
        },
        {
            id: 402,
            name: 'Corner Drugstore',
            address: '333 Birch Blvd, Townsville, ST 12346',
            phone: '+1 (555) 678-9012',
            rating: 4.4,
            hours: '9:00 AM - 7:00 PM',
            delivery: false,
            image: '/images/pharmacies/pharmacy2.jpg'
        }
    ];
    
    // Return providers based on requested type
    if (type === 'hospitals') {
        return { hospitals };
    } else if (type === 'clinics') {
        return { clinics };
    } else if (type === 'pharmacies') {
        return { pharmacies };
    } else {
        // Return all types for 'all'
        return { hospitals, clinics, pharmacies };
    }
}

/**
 * Update a doctor's access to patient data
 * @param {number} doctorId - The ID of the doctor to update access for
 * @param {boolean} hasAccess - Whether the doctor should have access to patient data
 * @returns {Promise<Object>} Response with success/error information
 */
export async function updateDoctorAccess(doctorId, hasAccess) {
    try {
        // Validate required parameters
        if (!doctorId) {
            return {
                success: false,
                error: 'Doctor ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        if (hasAccess === undefined || hasAccess === null) {
            return {
                success: false,
                error: 'Access value is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock doctor access response');
            return getMockUpdateDoctorAccessResponse(doctorId, hasAccess);
        }

        // Log the request in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log(`Updating access for doctor ${doctorId} to ${hasAccess ? 'granted' : 'revoked'}`);
        }

        try {
            const response = await fetch(`/api/doctors/${doctorId}/access`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ hasAccess })
            });

            // Log the response status in development only
            if (process.env.NODE_ENV !== 'production') {
                console.log(`Update doctor ${doctorId} access response status:`, response.status);
            }

            if (!response.ok) {
                // Handle 404 or other non-JSON responses gracefully
                if (response.status === 404) {
                    console.warn(`Doctor ${doctorId} not found (404), using mock response`);
                    return getMockUpdateDoctorAccessResponse(doctorId, hasAccess);
                }
                
                // For other errors, try to parse JSON if possible
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to update doctor access',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    // If JSON parsing fails, log the error and fall back to mock data
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockUpdateDoctorAccessResponse(doctorId, hasAccess);
                }
            }

            try {
                const data = await response.json();
                return {
                    success: true,
                    data: data,
                    message: `Doctor access ${hasAccess ? 'granted' : 'revoked'} successfully`
                };
            } catch (jsonError) {
                console.error(`Error parsing update doctor access response for doctor ${doctorId}:`, jsonError);
                return getMockUpdateDoctorAccessResponse(doctorId, hasAccess);
            }
        } catch (fetchError) {
            console.error('Network error in updateDoctorAccess:', fetchError);
            // Fall back to mock data for network errors
            return getMockUpdateDoctorAccessResponse(doctorId, hasAccess);
        }
    } catch (error) {
        console.error('Error updating doctor access:', error);
        // Fall back to mock data instead of throwing the error
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

/**
 * Generate a mock response for updating doctor access
 * @param {number} doctorId - The ID of the doctor
 * @param {boolean} hasAccess - Whether the doctor was granted access
 * @returns {Object} A mock success response
 */
function getMockUpdateDoctorAccessResponse(doctorId, hasAccess) {
    const now = new Date();
    
    // Try to get doctor info from localStorage if available
    let doctorName = 'Dr. Unknown';
    let doctorSpecialty = 'General Practice';
    
    try {
        // Check if we have doctors data in localStorage
        const doctorsDataStr = localStorage.getItem('safe_doctors_data');
        if (doctorsDataStr) {
            const doctorsData = JSON.parse(doctorsDataStr);
            const doctor = doctorsData.find(d => d.id === parseInt(doctorId));
            if (doctor) {
                doctorName = doctor.name || `Dr. ${doctor.firstName || ''} ${doctor.lastName || ''}`.trim();
                doctorSpecialty = doctor.specialty || 'General Practice';
            }
        }
    } catch (e) {
        console.warn('Could not retrieve doctor data from localStorage:', e);
    }
    
    return {
        success: true,
        message: `Doctor access ${hasAccess ? 'granted' : 'revoked'} successfully (mock data)`,
        data: {
            doctor_id: parseInt(doctorId),
            doctor_name: doctorName,
            specialty: doctorSpecialty,
            has_access: hasAccess,
            updated_at: now.toISOString()
        }
    };
}


export async function setPrimaryDoctor(doctorId) {
    try {
        if (!doctorId) {
            return {
                success: false,
                error: 'Doctor ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock primary doctor response');
            return getMockSetPrimaryDoctorResponse(doctorId);
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log(`Setting doctor ${doctorId} as primary doctor`);
        }

        try {
            const response = await fetch(`/api/doctors/${doctorId}/primary`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            if (process.env.NODE_ENV !== 'production') {
                console.log(`Set primary doctor response status:`, response.status);
            }

            if (!response.ok) {
                if (response.status === 404) {
                    console.warn(`Doctor ${doctorId} not found (404), using mock response`);
                    return getMockSetPrimaryDoctorResponse(doctorId);
                }
                
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to set primary doctor',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockSetPrimaryDoctorResponse(doctorId);
                }
            }

            try {
                const data = await response.json();
                return {
                    success: true,
                    data: data,
                    message: 'Primary doctor set successfully'
                };
            } catch (jsonError) {
                console.error(`Error parsing set primary doctor response:`, jsonError);
                return getMockSetPrimaryDoctorResponse(doctorId);
            }
        } catch (fetchError) {
            console.error('Network error in setPrimaryDoctor:', fetchError);
            return getMockSetPrimaryDoctorResponse(doctorId);
        }
    } catch (error) {
        console.error('Error setting primary doctor:', error);
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

function getMockSetPrimaryDoctorResponse(doctorId) {
    const now = new Date();
    
    let doctorName = 'Dr. Unknown';
    let doctorSpecialty = 'General Practice';
    
    try {
        const doctorsDataStr = localStorage.getItem('safe_doctors_data');
        if (doctorsDataStr) {
            const doctorsData = JSON.parse(doctorsDataStr);
            const doctor = doctorsData.find(d => d.id === parseInt(doctorId));
            if (doctor) {
                doctorName = doctor.name || `Dr. ${doctor.firstName || ''} ${doctor.lastName || ''}`.trim();
                doctorSpecialty = doctor.specialty || 'General Practice';
            }
        }
    } catch (e) {
        console.warn('Could not retrieve doctor data from localStorage:', e);
    }
    
    return {
        success: true,
        message: 'Primary doctor set successfully (mock data)',
        data: {
            patient_id: getCurrentUserId() || Math.floor(Math.random() * 1000) + 1,
            primary_doctor: {
                id: parseInt(doctorId),
                name: doctorName,
                specialty: doctorSpecialty
            },
            updated_at: now.toISOString()
        }
    };
}

/**
 * Get all conversations for the current patient
 * @returns {Promise<Array>} Array of conversation objects
 */
export async function getConversations() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock conversation data');
            return getMockConversations();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient conversations...');
        }

        const response = await fetch('/api/conversations', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Conversations response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Conversations endpoint not found (404), using mock data');
                return getMockConversations();
            }
            
            // For other errors, try to parse JSON if possible
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                // Fall back to mock data for other errors
                return getMockConversations();
            } catch (jsonError) {
                // If JSON parsing fails, log the error and fall back to mock data
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockConversations();
            }
        }

        try {
            const data = await response.json();
            return data.conversations || [];
        } catch (jsonError) {
            console.error('Error parsing conversations response:', jsonError);
            return getMockConversations();
        }
    } catch (error) {
        console.error('Error fetching conversations:', error);
        // Fall back to mock data instead of throwing the error
        return getMockConversations();
    }
}

/**
 * Get mock conversation data for fallback
 * @returns {Array} Mock conversation data
 */
function getMockConversations() {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    return [
        {
            id: 1,
            participantId: 101,
            participantName: 'Dr. Sarah Johnson',
            participantRole: 'Cardiologist',
            participantAvatar: '/images/doctors/doctor1.jpg',
            lastMessage: 'Please let me know if you have any questions about your medication.',
            lastMessageTime: yesterday.toISOString(),
            unreadCount: 1,
            status: 'active'
        },
        {
            id: 2,
            participantId: 102,
            participantName: 'Dr. Michael Chen',
            participantRole: 'General Practitioner',
            participantAvatar: '/images/doctors/doctor2.jpg',
            lastMessage: 'Your test results look good. We can discuss them at your next appointment.',
            lastMessageTime: lastWeek.toISOString(),
            unreadCount: 0,
            status: 'active'
        },
        {
            id: 3,
            participantId: 201,
            participantName: 'Support Team',
            participantRole: 'Patient Support',
            participantAvatar: '/images/support/support.jpg',
            lastMessage: 'How can we help you today?',
            lastMessageTime: today.toISOString(),
            unreadCount: 0,
            status: 'active'
        }
    ];
}

/**
 * Get a specific conversation by ID
 * @param {number} id - The conversation ID
 * @returns {Promise<Object>} The conversation object
 */
export async function getConversation(id) {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock conversation data');
            return getMockConversation(id);
        }

        // Log the request in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log(`Fetching conversation ${id}...`);
        }

        const response = await fetch(`/api/conversations/${id}`, {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        // Log the response status in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log(`Conversation ${id} response status:`, response.status);
        }

        if (!response.ok) {
            // Handle 404 or other non-JSON responses gracefully
            if (response.status === 404) {
                console.warn(`Conversation endpoint not found (404) or conversation ${id} not found, using mock data`);
                return getMockConversation(id);
            }
            
            // For other errors, try to parse JSON if possible
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                // Fall back to mock data for other errors
                return getMockConversation(id);
            } catch (jsonError) {
                // If JSON parsing fails, log the error and fall back to mock data
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockConversation(id);
            }
        }

        try {
            return await response.json();
        } catch (jsonError) {
            console.error(`Error parsing conversation ${id} response:`, jsonError);
            return getMockConversation(id);
        }
    } catch (error) {
        console.error(`Error fetching conversation ${id}:`, error);
        // Fall back to mock data instead of throwing the error
        return getMockConversation(id);
    }
}

/**
 * Get mock conversation data for a specific conversation ID
 * @param {number} id - The conversation ID
 * @returns {Object} Mock conversation data
 */
function getMockConversation(id) {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    // First try to find the conversation in the mock conversations list
    const mockConversations = getMockConversations();
    const conversation = mockConversations.find(conv => conv.id === parseInt(id));
    
    if (conversation) {
        // If found, add messages to the conversation
        return {
            ...conversation,
            messages: generateMockMessages(conversation)
        };
    }
    
    // If not found, create a default mock conversation
    return {
        id: parseInt(id),
        participantId: 999,
        participantName: 'Dr. Default Doctor',
        participantRole: 'General Practitioner',
        participantAvatar: '/images/doctors/default.jpg',
        lastMessage: 'This is a mock conversation.',
        lastMessageTime: today.toISOString(),
        unreadCount: 0,
        status: 'active',
        messages: [
            {
                id: 1,
                senderId: 999,
                senderName: 'Dr. Default Doctor',
                senderRole: 'doctor',
                content: 'Hello, this is a mock conversation because the requested conversation was not found.',
                timestamp: lastWeek.toISOString(),
                status: 'read'
            },
            {
                id: 2,
                senderId: 'self',
                senderName: 'You',
                senderRole: 'patient',
                content: 'I understand. This is just a placeholder since the actual conversation data could not be retrieved.',
                timestamp: today.toISOString(),
                status: 'sent'
            }
        ]
    };
}

/**
 * Generate mock messages for a conversation
 * @param {Object} conversation - The conversation object
 * @returns {Array} Array of mock messages
 */
function generateMockMessages(conversation) {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    // Generate different messages based on conversation ID
    switch(conversation.id) {
        case 1: // Dr. Sarah Johnson (Cardiologist)
            return [
                {
                    id: 1,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'doctor',
                    content: 'Hello! I have reviewed your recent test results. Your blood pressure is slightly elevated.',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 2,
                    senderId: 'self',
                    senderName: 'You',
                    senderRole: 'patient',
                    content: 'Thank you for letting me know. Should I be concerned?',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 3,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'doctor',
                    content: 'I would not be too concerned yet, but I recommend monitoring it daily for the next two weeks. Make sure to take your medication as prescribed.',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 4,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'doctor',
                    content: 'Please let me know if you have any questions about your medication.',
                    timestamp: yesterday.toISOString(),
                    status: 'delivered'
                }
            ];
            
        case 2: // Dr. Michael Chen (General Practitioner)
            return [
                {
                    id: 1,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'doctor',
                    content: 'Good news! I have received your lab results and everything looks normal.',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 2,
                    senderId: 'self',
                    senderName: 'You',
                    senderRole: 'patient',
                    content: 'That is great to hear! What about the vitamin D levels we discussed?',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 3,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'doctor',
                    content: 'Your vitamin D is on the lower end of normal. I suggest continuing with the supplement we discussed. Your test results look good. We can discuss them at your next appointment.',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                }
            ];
            
        case 3: // Support Team
            return [
                {
                    id: 1,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'support',
                    content: 'Hello! Welcome to SAFE. How can our support team assist you today?',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 2,
                    senderId: 'self',
                    senderName: 'You',
                    senderRole: 'patient',
                    content: 'I am having trouble scheduling an appointment with a specialist.',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 3,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'support',
                    content: 'I am sorry to hear that. Could you please provide more details about what specific issue you are encountering?',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 4,
                    senderId: 'self',
                    senderName: 'You',
                    senderRole: 'patient',
                    content: 'When I try to book with Dr. Rodriguez, it says no appointments available for the next 3 months.',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 5,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'support',
                    content: 'Thank you for the details. I will check Dr. Rodriguez schedule and see if there are any cancellations or additional slots that might not be showing in the system. How can we help you today?',
                    timestamp: today.toISOString(),
                    status: 'delivered'
                }
            ];
            
        default:
            return [
                {
                    id: 1,
                    senderId: conversation.participantId,
                    senderName: conversation.participantName,
                    senderRole: 'doctor',
                    content: 'Hello, this is a mock conversation.',
                    timestamp: lastWeek.toISOString(),
                    status: 'read'
                },
                {
                    id: 2,
                    senderId: 'self',
                    senderName: 'You',
                    senderRole: 'patient',
                    content: 'Hello doctor, thank you for connecting with me.',
                    timestamp: today.toISOString(),
                    status: 'sent'
                }
            ];
    }
}


export async function sendMessage(conversationId, content) {
    try {
        if (!conversationId) {
            return {
                success: false,
                error: 'Conversation ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        if (!content || content.trim() === '') {
            return {
                success: false,
                error: 'Message content cannot be empty',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock message response');
            return getMockSendMessageResponse(conversationId, content);
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log(`Sending message to conversation ${conversationId}:`, content.substring(0, 50) + (content.length > 50 ? '...' : ''));
        }

        try {
            const response = await fetch(`/api/conversations/${conversationId}/messages`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify({ content })
            });

            if (process.env.NODE_ENV !== 'production') {
                console.log(`Send message to conversation ${conversationId} response status:`, response.status);
            }

            if (!response.ok) {
                if (response.status === 404) {
                    console.warn(`Conversation ${conversationId} not found (404), using mock response`);
                    return getMockSendMessageResponse(conversationId, content);
                }
                
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to send message',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockSendMessageResponse(conversationId, content);
                }
            }

            try {
                const data = await response.json();
                return {
                    success: true,
                    data: data,
                    message: 'Message sent successfully'
                };
            } catch (jsonError) {
                console.error(`Error parsing send message response for conversation ${conversationId}:`, jsonError);
                return getMockSendMessageResponse(conversationId, content);
            }
        } catch (fetchError) {
            console.error('Network error in sendMessage:', fetchError);
            return getMockSendMessageResponse(conversationId, content);
        }
    } catch (error) {
        console.error('Error sending message:', error);
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

function getMockSendMessageResponse(conversationId, content) {
    const now = new Date();
    const messageId = Math.floor(Math.random() * 10000) + 1;
    
    let userId = 1001;
    let userName = 'John Doe';
    
    try {
        const userDataStr = localStorage.getItem('safe_user_data');
        if (userDataStr) {
            const userData = JSON.parse(userDataStr);
            if (userData && userData.id) {
                userId = userData.id;
                userName = userData.name || `${userData.firstName || ''} ${userData.lastName || ''}`.trim() || 'Current User';
            }
        }
    } catch (e) {
        console.warn('Could not retrieve user data from localStorage:', e);
    }
    
    return {
        success: true,
        message: 'Message sent successfully (mock data)',
        data: {
            id: messageId,
            conversation_id: parseInt(conversationId),
            sender_id: userId,
            sender_name: userName,
            sender_type: 'patient',
            content: content,
            read: false,
            created_at: now.toISOString(),
            updated_at: now.toISOString()
        }
    };
}

export async function checkMedicineAvailability(medication, pharmacyId) {
    try {
        if (!medication) {
            return {
                success: false,
                error: 'Medication name or ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        if (!pharmacyId) {
            return {
                success: false,
                error: 'Pharmacy ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock medicine availability data');
            return getMockMedicineAvailability(medication, pharmacyId);
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log(`Checking availability of ${medication} at pharmacy ${pharmacyId}`);
        }

        try {
            const response = await fetch(`/api/pharmacies/${pharmacyId}/medicines/${encodeURIComponent(medication)}/availability`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

            if (process.env.NODE_ENV !== 'production') {
                console.log(`Medicine availability response status:`, response.status);
            }

            if (!response.ok) {
                if (response.status === 404) {
                    console.warn(`Medicine ${medication} or pharmacy ${pharmacyId} not found (404), using mock response`);
                    return getMockMedicineAvailability(medication, pharmacyId);
                }
                
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to check medicine availability',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockMedicineAvailability(medication, pharmacyId);
                }
            }

            try {
                const data = await response.json();
                return {
                    success: true,
                    data: data
                };
            } catch (jsonError) {
                console.error(`Error parsing medicine availability response:`, jsonError);
                return getMockMedicineAvailability(medication, pharmacyId);
            }
        } catch (fetchError) {
            console.error('Network error in checkMedicineAvailability:', fetchError);
            return getMockMedicineAvailability(medication, pharmacyId);
        }
    } catch (error) {
        console.error('Error checking medicine availability:', error);
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}


function getMockMedicineAvailability(medication, pharmacyId) {
    const random = Math.random();
    const isAvailable = random < 0.7; 
    
    const stockLevel = isAvailable ? Math.floor(Math.random() * 50) + 1 : 0;
    
    const price = (Math.random() * 100 + 5).toFixed(2);
    
    let pharmacyName = 'Local Pharmacy';
    let pharmacyAddress = '123 Main St';
    
    try {
        const providersDataStr = localStorage.getItem('safe_medical_providers');
        if (providersDataStr) {
            const providersData = JSON.parse(providersDataStr);
            const pharmacies = providersData.filter(p => p.type === 'pharmacy');
            const pharmacy = pharmacies.find(p => p.id === parseInt(pharmacyId) || p.id === pharmacyId);
            if (pharmacy) {
                pharmacyName = pharmacy.name || 'Local Pharmacy';
                pharmacyAddress = pharmacy.address || '123 Main St';
            }
        }
    } catch (e) {
        console.warn('Could not retrieve pharmacy data from localStorage:', e);
    }
    
    return {
        success: true,
        data: {
            medication: {
                name: medication,
                id: typeof medication === 'number' ? medication : Math.floor(Math.random() * 1000) + 1
            },
            pharmacy: {
                id: parseInt(pharmacyId) || pharmacyId,
                name: pharmacyName,
                address: pharmacyAddress
            },
            availability: {
                available: isAvailable,
                stock_level: stockLevel,
                price: price,
                currency: 'USD',
                requires_prescription: random > 0.3, // 70% chance of requiring prescription
                estimated_restock_date: !isAvailable ? addDays(new Date(), Math.floor(Math.random() * 7) + 1).toISOString().split('T')[0] : null
            },
            alternatives: isAvailable ? [] : generateMockAlternatives(medication, 3)
        }
    };
}

function generateMockAlternatives(originalMedication, count) {
    const alternatives = [];
    const prefixes = ['Generic ', 'Alternative ', 'Similar '];
    const suffixes = [' Plus', ' Extra', ' XR', ' SR'];
    
    for (let i = 0; i < count; i++) {
        const prefix = prefixes[Math.floor(Math.random() * prefixes.length)];
        const suffix = Math.random() > 0.5 ? suffixes[Math.floor(Math.random() * suffixes.length)] : '';
        const name = `${prefix}${originalMedication}${suffix}`;
        
        alternatives.push({
            id: Math.floor(Math.random() * 1000) + 1,
            name: name,
            price: (Math.random() * 80 + 5).toFixed(2),
            currency: 'USD',
            stock_level: Math.floor(Math.random() * 30) + 5,
            requires_prescription: Math.random() > 0.3 // 70% chance of requiring prescription
        });
    }
    
    return alternatives;
}


export async function requestConsultation(doctorId, reason, preferredTime, attachments = []) {
    try {
        if (!doctorId) {
            return {
                success: false,
                error: 'Doctor ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        if (!reason || reason.trim() === '') {
            return {
                success: false,
                error: 'Consultation reason is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        let preferredResponseTime;
        switch (preferredTime) {
            case 'Within 24 hours':
                preferredResponseTime = 'urgent';
                break;
            case 'This week':
                preferredResponseTime = 'standard';
                break;
            case 'As soon as possible':
                preferredResponseTime = 'immediate';
                break;
            default:
                preferredResponseTime = 'standard';
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock consultation request response');
            return getMockConsultationRequestResponse(doctorId, reason, preferredResponseTime, attachments);
        }

        const consultationData = {
            doctorId,
            reason,
            preferredResponseTime,
            attachments: attachments.map(file => ({
                name: file.name,
                type: file.type,
                size: file.size
            }))
        };

        if (process.env.NODE_ENV !== 'production') {
            console.log('Requesting consultation with data:', {
                doctorId,
                reason: reason.substring(0, 20) + (reason.length > 20 ? '...' : ''),
                preferredResponseTime,
                attachmentsCount: attachments.length
            });
        }

        try {
            const response = await fetch('/api/consultations', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(consultationData)
            });

            if (process.env.NODE_ENV !== 'production') {
                console.log('Consultation request response status:', response.status);
            }

            if (!response.ok) {
                if (response.status === 404) {
                    console.warn('Consultations endpoint not found (404), using mock response');
                    return getMockConsultationRequestResponse(doctorId, reason, preferredResponseTime, attachments);
                }
                
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to request consultation',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockConsultationRequestResponse(doctorId, reason, preferredResponseTime, attachments);
                }
            }

            try {
                const data = await response.json();
                return {
                    success: true,
                    data: data,
                    message: 'Consultation requested successfully'
                };
            } catch (jsonError) {
                console.error('Error parsing consultation request response:', jsonError);
                return getMockConsultationRequestResponse(doctorId, reason, preferredResponseTime, attachments);
            }
        } catch (fetchError) {
            console.error('Network error in requestConsultation:', fetchError);
            return getMockConsultationRequestResponse(doctorId, reason, preferredResponseTime, attachments);
        }
    } catch (error) {
        console.error('Error requesting consultation:', error);
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}


function getMockConsultationRequestResponse(doctorId, reason, preferredResponseTime, attachments = []) {
    const now = new Date();
    const consultationId = Math.floor(Math.random() * 10000) + 1000;
    
    
    let doctorName = 'Dr. Unknown';
    let doctorSpecialty = 'General Practice';
    
    try {
        const doctorsDataStr = localStorage.getItem('safe_doctors_data');
        if (doctorsDataStr) {
            const doctorsData = JSON.parse(doctorsDataStr);
            const doctor = doctorsData.find(d => d.id === parseInt(doctorId));
            if (doctor) {
                doctorName = doctor.name || `Dr. ${doctor.firstName || ''} ${doctor.lastName || ''}`.trim();
                doctorSpecialty = doctor.specialty || 'General Practice';
            }
        }
    } catch (e) {
        console.warn('Could not retrieve doctor data from localStorage:', e);
    }
    
    let expectedResponseDate = new Date(now);
    switch (preferredResponseTime) {
        case 'immediate':
            expectedResponseDate.setHours(expectedResponseDate.getHours() + 2);
            break;
        case 'urgent':
            expectedResponseDate.setHours(expectedResponseDate.getHours() + 24);
            break;
        case 'standard':
        default:
            expectedResponseDate.setDate(expectedResponseDate.getDate() + 3);
            break;
    }
    
    return {
        success: true,
        message: 'Consultation requested successfully (mock data)',
        data: {
            id: consultationId,
            patient_id: getCurrentUserId() || Math.floor(Math.random() * 1000) + 1,
            doctor_id: parseInt(doctorId),
            doctor_name: doctorName,
            doctor_specialty: doctorSpecialty,
            reason: reason,
            status: 'pending',
            preferred_response_time: preferredResponseTime,
            expected_response_by: expectedResponseDate.toISOString(),
            attachments: attachments.map(file => ({
                name: file.name,
                type: file.type,
                size: file.size,
                uploaded_at: now.toISOString()
            })),
            created_at: now.toISOString(),
            updated_at: now.toISOString()
        }
    };
}


export async function getMedicineReminders() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock medicine reminders data');
            return getMockMedicineReminders();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching medicine reminders...');
        }

        try {
            const response = await fetch('/api/medicine-reminders', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                }
            });

      
            if (process.env.NODE_ENV !== 'production') {
                console.log('Medicine reminders response status:', response.status);
            }

            if (!response.ok) {
                
                if (response.status === 404) {
                    console.warn('Medicine reminders endpoint not found (404), using mock data');
                    return getMockMedicineReminders();
                }
                
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return getMockMedicineReminders();
                } catch (jsonError) {
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockMedicineReminders();
                }
            }

            try {
                const data = await response.json();
                return data.reminders || [];
            } catch (jsonError) {
                console.error('Error parsing medicine reminders response:', jsonError);
                return getMockMedicineReminders();
            }
        } catch (fetchError) {
            console.error('Network error in getMedicineReminders:', fetchError);
            return getMockMedicineReminders();
        }
    } catch (error) {
        console.error('Error fetching medicine reminders:', error);
        return getMockMedicineReminders();
    }
}

function getMockMedicineReminders() {
    const now = new Date();
    const today = now.toISOString().split('T')[0];
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split('T')[0];
    
    return [
        {
            id: 1001,
            medication_name: 'Amoxicillin',
            dosage: '500mg',
            frequency: 'Every 8 hours',
            start_date: addDays(now, -5).toISOString().split('T')[0],
            end_date: addDays(now, 5).toISOString().split('T')[0],
            instructions: 'Take with food',
            times: ['08:00', '16:00', '00:00'],
            status: 'active',
            next_dose: addHours(now, 1).toISOString(),
            prescription_id: 2001
        },
        {
            id: 1002,
            medication_name: 'Ibuprofen',
            dosage: '200mg',
            frequency: 'As needed',
            start_date: addDays(now, -10).toISOString().split('T')[0],
            end_date: addDays(now, 20).toISOString().split('T')[0],
            instructions: 'Take for pain, maximum 4 times per day',
            times: [],
            status: 'active',
            prescription_id: 2002
        },
        {
            id: 1003,
            medication_name: 'Vitamin D',
            dosage: '1000 IU',
            frequency: 'Once daily',
            start_date: addDays(now, -30).toISOString().split('T')[0],
            end_date: null,
            instructions: 'Take with breakfast',
            times: ['09:00'],
            status: 'active',
            next_dose: addHours(setHours(tomorrow, 9), 0).toISOString(),
            prescription_id: null
        },
        {
            id: 1004,
            medication_name: 'Lisinopril',
            dosage: '10mg',
            frequency: 'Once daily',
            start_date: addDays(now, -60).toISOString().split('T')[0],
            end_date: null,
            instructions: 'Take in the morning',
            times: ['08:00'],
            status: 'active',
            next_dose: addHours(setHours(tomorrow, 8), 0).toISOString(),
            prescription_id: 2003
        }
    ];
}


function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}


function addHours(date, hours) {
    const result = new Date(date);
    result.setHours(result.getHours() + hours);
    return result;
}


function setHours(date, hours) {
    const result = new Date(date);
    result.setHours(hours, 0, 0, 0);
    return result;
}

export async function updateMedicineReminder(id, data) {
    try {
        if (!id) {
            return {
                success: false,
                error: 'Reminder ID is required',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        if (!data || Object.keys(data).length === 0) {
            return {
                success: false,
                error: 'No update data provided',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock medicine reminder update response');
            return getMockUpdateMedicineReminderResponse(id, data);
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log(`Updating medicine reminder ${id} with data:`, {
                ...data,
                instructions: data.instructions ? 
                    (data.instructions.length > 20 ? 
                        data.instructions.substring(0, 20) + '...' : 
                        data.instructions) : 
                    undefined
            });
        }

        try {
            const response = await fetch(`/api/medicine-reminders/${id}`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(data)
            });

            if (process.env.NODE_ENV !== 'production') {
                console.log(`Update medicine reminder ${id} response status:`, response.status);
            }

            if (!response.ok) {
                if (response.status === 404) {
                    console.warn(`Medicine reminder ${id} not found (404), using mock response`);
                    return getMockUpdateMedicineReminderResponse(id, data);
                }
                
                try {
                    const errorData = await response.json();
                    console.error(`API error: ${errorData.error || response.statusText}`);
                    return {
                        success: false,
                        error: errorData.error || 'Failed to update medicine reminder',
                        errorCode: errorData.errorCode || 'API_ERROR',
                        status: response.status
                    };
                } catch (jsonError) {
                    console.error(`Failed to parse error response: ${jsonError.message}`);
                    return getMockUpdateMedicineReminderResponse(id, data);
                }
            }

            try {
                const responseData = await response.json();
                return {
                    success: true,
                    data: responseData,
                    message: 'Medicine reminder updated successfully'
                };
            } catch (jsonError) {
                console.error(`Error parsing update medicine reminder response for reminder ${id}:`, jsonError);
                return getMockUpdateMedicineReminderResponse(id, data);
            }
        } catch (fetchError) {
            console.error('Network error in updateMedicineReminder:', fetchError);
            return getMockUpdateMedicineReminderResponse(id, data);
        }
    } catch (error) {
        console.error('Error updating medicine reminder:', error);
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

function getMockUpdateMedicineReminderResponse(id, data) {
    const now = new Date();
    
    let existingReminder = null;
    try {
        const remindersDataStr = localStorage.getItem('safe_medicine_reminders');
        if (remindersDataStr) {
            const remindersData = JSON.parse(remindersDataStr);
            existingReminder = remindersData.find(r => r.id === parseInt(id) || r.id === id);
        }
    } catch (e) {
        console.warn('Could not retrieve medicine reminders data from localStorage:', e);
    }
    
    if (!existingReminder) {
        existingReminder = {
            id: parseInt(id) || id,
            medication_name: 'Unknown Medication',
            dosage: '0mg',
            frequency: 'Once daily',
            start_date: now.toISOString().split('T')[0],
            end_date: null,
            instructions: 'Take as directed',
            times: ['09:00'],
            status: 'active',
            prescription_id: null
        };
    }
    
    const updatedReminder = {
        ...existingReminder,
        ...data,
        updated_at: now.toISOString()
    };
    
    return {
        success: true,
        message: 'Medicine reminder updated successfully (mock data)',
        data: updatedReminder
    };
}

export async function getPatientDashboardData() {
    try {
        const token = getAuthToken();
        if (!token) {
            throw new Error('Authentication token not found');
        }

        const response = await fetch('/api/dashboard/patient', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to fetch dashboard data');
        }

        return await response.json();
    } catch (error) {
        console.error('Error fetching patient dashboard data:', error);
        throw error;
    }
}

export async function getAppointments() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock appointment data');
            return getMockAppointments();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient appointments...');
        }

        const response = await fetch('/api/appointments', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Appointments response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Appointments endpoint not found (404), using mock data');
                return getMockAppointments();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockAppointments();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockAppointments();
            }
        }

        try {
            const data = await response.json();
            const appointmentsData = data.appointments || data;
            return Array.isArray(appointmentsData) ? appointmentsData : [];
        } catch (jsonError) {
            console.error('Error parsing appointments response:', jsonError);
            return getMockAppointments();
        }
    } catch (error) {
        console.error('Error fetching appointments:', error);
        return getMockAppointments();
    }
}


function getMockAppointments() {
    const today = new Date();
    const tomorrow = new Date(today);
    tomorrow.setDate(tomorrow.getDate() + 1);
    const nextWeek = new Date(today);
    nextWeek.setDate(nextWeek.getDate() + 7);
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    const lastMonth = new Date(today);
    lastMonth.setDate(lastMonth.getDate() - 30);

    return [
        {
            id: 1,
            doctorId: 101,
            doctorName: 'Dr. Sarah Johnson',
            doctorSpecialty: 'Cardiologist',
            date: nextWeek.toISOString().split('T')[0],
            time: '09:00 AM',
            duration: 30,
            status: 'Scheduled',
            reason: 'Annual heart checkup',
            location: 'Main Hospital, Room 305',
            notes: '',
            createdAt: today.toISOString()
        },
        {
            id: 2,
            doctorId: 102,
            doctorName: 'Dr. Michael Chen',
            doctorSpecialty: 'General Practitioner',
            date: tomorrow.toISOString().split('T')[0],
            time: '02:30 PM',
            duration: 45,
            status: 'Confirmed',
            reason: 'Flu symptoms and fever',
            location: 'Medical Center, Room 102',
            notes: 'Bring previous test results',
            createdAt: today.toISOString()
        },
        {
            id: 3,
            doctorId: 103,
            doctorName: 'Dr. Emily Rodriguez',
            doctorSpecialty: 'Dermatologist',
            date: lastWeek.toISOString().split('T')[0],
            time: '10:15 AM',
            duration: 30,
            status: 'Completed',
            reason: 'Skin rash examination',
            location: 'Dermatology Clinic, Room 203',
            notes: 'Prescription provided for topical cream',
            createdAt: lastMonth.toISOString()
        },
        {
            id: 4,
            doctorId: 104,
            doctorName: 'Dr. James Wilson',
            doctorSpecialty: 'Orthopedic Surgeon',
            date: lastMonth.toISOString().split('T')[0],
            time: '03:00 PM',
            duration: 60,
            status: 'Cancelled',
            reason: 'Knee pain consultation',
            location: 'Orthopedic Center, Room 405',
            notes: 'Cancelled by patient due to scheduling conflict',
            createdAt: lastMonth.toISOString()
        }
    ];
}

export async function getPatientProfile() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock patient profile data');
            return getMockPatientProfile();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient profile...');
        }

        const response = await fetch('/api/patient/profile', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Patient profile response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Patient profile endpoint not found (404), using mock data');
                return getMockPatientProfile();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockPatientProfile();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockPatientProfile();
            }
        }

        try {
            const data = await response.json();
            return data;
        } catch (jsonError) {
            console.error('Error parsing patient profile response:', jsonError);
            return getMockPatientProfile();
        }
    } catch (error) {
        console.error('Error fetching patient profile:', error);
        return getMockPatientProfile();
    }
}

function getMockPatientProfile() {
    const userId = getCurrentUserId() || 'user123';
    const userEmail = typeof window !== 'undefined' && localStorage.getItem('safe_user_data') ? 
        JSON.parse(localStorage.getItem('safe_user_data')).email : 'patient@example.com';
    const userName = typeof window !== 'undefined' && localStorage.getItem('safe_user_data') ? 
        JSON.parse(localStorage.getItem('safe_user_data')).name : 'Default Patient';

    return {
        id: userId,
        name: userName,
        dateOfBirth: '1990-05-15',
        gender: 'Male',
        bloodType: 'O+',
        contact: {
            email: userEmail,
            phone: '+1 (555) 123-4567',
            address: '123 Health Street, Medical City, MC 12345'
        },
        emergencyContact: {
            name: 'Emergency Contact',
            relationship: 'Family',
            phone: '+1 (555) 987-6543'
        },
        insurance: {
            provider: 'HealthGuard Insurance',
            policyNumber: 'HGI-123456789',
            expiryDate: new Date(new Date().getFullYear() + 1, 0, 1).toISOString()
        },
        allergies: ['Penicillin', 'Peanuts'],
        chronicConditions: ['Asthma'],
        lastUpdated: new Date().toISOString()
    };
}

export async function updatePatientProfile(profileData) {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, cannot update profile');
            return { ...profileData, success: false, message: 'Authentication required' };
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Updating patient profile:', profileData);
        }

        const response = await fetch('/api/patient/profile', {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(profileData)
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Update profile response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Patient profile update endpoint not found (404)');
                return { ...profileData, success: false, message: 'API endpoint not found' };
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return { 
                    ...profileData, 
                    success: false, 
                    message: errorData.error || `Failed to update profile: ${response.status}` 
                };
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return { 
                    ...profileData, 
                    success: false, 
                    message: `Failed to update profile: ${response.status}` 
                };
            }
        }

        try {
            const data = await response.json();
            return { ...data, success: true };
        } catch (jsonError) {
            console.error('Error parsing profile update response:', jsonError);
            return { ...profileData, success: true, message: 'Update successful but response parsing failed' };
        }
    } catch (error) {
        console.error('Error updating patient profile:', error);
        return { 
            ...profileData, 
            success: false, 
        return { 
            ...profileData, 
            success: false, 
            message: error.message || 'Failed to update profile due to an unexpected error' 
        };
    }
}

/**
 * Get the list of available doctors
 * @returns {Promise<Array>} List of doctors
 */
export async function getDoctors() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock doctor data');
            return getMockDoctors();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching doctors...');
        }

        const response = await fetch('/api/doctors', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Doctors response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Doctors endpoint not found (404), using mock data');
                return getMockDoctors();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockDoctors();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockDoctors();
            }
        }

        try {
            const data = await response.json();
            return Array.isArray(data) ? data : (data.doctors || []);
        } catch (jsonError) {
            console.error('Error parsing doctors response:', jsonError);
            return getMockDoctors();
        }
    } catch (error) {
        console.error('Error fetching doctors:', error);
        return getMockDoctors();
    }
}

function getMockDoctors() {
    return [
        {
            id: 101,
            name: 'Dr. Sarah Johnson',
            specialty: 'Cardiologist',
            hospital: 'Main Hospital',
            rating: 4.8,
            experience: 12,
            image: '/images/doctors/doctor1.jpg',
            availability: ['Monday', 'Wednesday', 'Friday'],
            contact: {
                email: 'sarah.johnson@example.com',
                phone: '+1 (555) 123-4567'
            }
        },
        {
            id: 102,
            name: 'Dr. Michael Chen',
            specialty: 'General Practitioner',
            hospital: 'Medical Center',
            rating: 4.6,
            experience: 8,
            image: '/images/doctors/doctor2.jpg',
            availability: ['Monday', 'Tuesday', 'Thursday'],
            contact: {
                email: 'michael.chen@example.com',
                phone: '+1 (555) 234-5678'
            }
        },
        {
            id: 103,
            name: 'Dr. Emily Rodriguez',
            specialty: 'Dermatologist',
            hospital: 'Dermatology Clinic',
            rating: 4.9,
            experience: 15,
            image: '/images/doctors/doctor3.jpg',
            availability: ['Tuesday', 'Wednesday', 'Friday'],
            contact: {
                email: 'emily.rodriguez@example.com',
                phone: '+1 (555) 345-6789'
            }
        },
        {
            id: 104,
            name: 'Dr. James Wilson',
            specialty: 'Orthopedic Surgeon',
            hospital: 'Orthopedic Center',
            rating: 4.7,
            experience: 20,
            image: '/images/doctors/doctor4.jpg',
            availability: ['Monday', 'Thursday', 'Friday'],
            contact: {
                email: 'james.wilson@example.com',
                phone: '+1 (555) 456-7890'
            }
        }
    ];
}


function getAuthToken() {
    try {
        if (typeof window !== 'undefined' && window.localStorage) {
            return localStorage.getItem('safe_auth_token');
        }
        return null;
    } catch (error) {
        console.error('Error retrieving auth token:', error);
        return null;
    }
}

export function getCurrentUserId() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('No auth token found');
            return null;
        }
        
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const payload = JSON.parse(atob(base64));
        
        return payload?.id || payload?.userId || payload?.sub;
    } catch (error) {
        console.error('Error decoding token:', error);
        return null;
    }
}