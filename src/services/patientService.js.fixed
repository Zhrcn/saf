// Patient service functions for the Safe WebApp
// This file contains functions for retrieving patient data from the API

/**
 * Get authentication token from localStorage
 * @returns {string|null} The authentication token or null if not found
 */
function getAuthToken() {
    try {
        if (typeof window !== 'undefined' && window.localStorage) {
            return localStorage.getItem('safe_auth_token');
        }
        return null;
    } catch (error) {
        console.error('Error retrieving auth token:', error);
        return null;
    }
}

/**
 * Get the current user ID from the JWT token
 * @returns {string|null} The user ID or null if not found
 */
export function getCurrentUserId() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('No auth token found');
            return null;
        }
        
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const payload = JSON.parse(atob(base64));
        
        return payload?.id || payload?.userId || payload?.sub;
    } catch (error) {
        console.error('Error decoding token:', error);
        return null;
    }
}

/**
 * Get health metrics for the current patient
 * @returns {Promise<Object>} Health metrics data or mock data on error
 */
export async function getHealthMetrics() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock health metrics data');
            return getMockHealthMetrics();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient health metrics...');
        }

        const response = await fetch('/api/health-metrics', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Health metrics response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Health metrics endpoint not found (404), using mock data');
                return getMockHealthMetrics();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockHealthMetrics();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockHealthMetrics();
            }
        }

        try {
            const data = await response.json();
            return data;
        } catch (jsonError) {
            console.error('Error parsing health metrics response:', jsonError);
            return getMockHealthMetrics();
        }
    } catch (error) {
        console.error('Error fetching health metrics:', error);
        return getMockHealthMetrics();
    }
}

/**
 * Get mock health metrics data for fallback
 * @returns {Object} Mock health metrics data
 */
function getMockHealthMetrics() {
    const today = new Date();
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    
    const heartRateData = [];
    const bloodPressureData = [];
    const bloodSugarData = [];
    
    for (let i = 0; i < 7; i++) {
        const date = new Date(lastWeek);
        date.setDate(date.getDate() + i);
        const dateStr = date.toISOString().split('T')[0];
        
        heartRateData.push({
            date: dateStr,
            value: Math.floor(Math.random() * 40) + 60
        });
        
        bloodPressureData.push({
            date: dateStr,
            systolic: Math.floor(Math.random() * 40) + 110,
            diastolic: Math.floor(Math.random() * 30) + 70
        });
        
        bloodSugarData.push({
            date: dateStr,
            value: Math.floor(Math.random() * 50) + 80
        });
    }
    
    return {
        heartRate: {
            current: heartRateData[heartRateData.length - 1].value,
            data: heartRateData,
            unit: 'bpm',
            normalRange: '60-100',
            status: 'normal'
        },
        bloodPressure: {
            current: {
                systolic: bloodPressureData[bloodPressureData.length - 1].systolic,
                diastolic: bloodPressureData[bloodPressureData.length - 1].diastolic
            },
            data: bloodPressureData,
            unit: 'mmHg',
            normalRange: '90-120/60-80',
            status: 'normal'
        },
        bloodSugar: {
            current: bloodSugarData[bloodSugarData.length - 1].value,
            data: bloodSugarData,
            unit: 'mg/dL',
            normalRange: '70-140',
            status: 'normal'
        },
        weight: {
            current: 70.5,
            unit: 'kg',
            history: [
                { date: addDays(today, -30).toISOString().split('T')[0], value: 71.2 },
                { date: addDays(today, -15).toISOString().split('T')[0], value: 70.8 },
                { date: today.toISOString().split('T')[0], value: 70.5 }
            ]
        },
        bmi: {
            current: 22.3,
            status: 'normal',
            normalRange: '18.5-24.9'
        },
        lastUpdated: today.toISOString()
    };
}

/**
 * Get prescriptions for the current patient
 * @returns {Promise<Array>} Prescriptions data or mock data on error
 */
export async function getPrescriptions() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock prescription data');
            return getMockPrescriptions();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient prescriptions...');
        }

        const response = await fetch('/api/prescriptions', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Prescriptions response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Prescriptions endpoint not found (404), using mock data');
                return getMockPrescriptions();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockPrescriptions();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockPrescriptions();
            }
        }

        try {
            const data = await response.json();
            return data.prescriptions || [];
        } catch (jsonError) {
            console.error('Error parsing prescriptions response:', jsonError);
            return getMockPrescriptions();
        }
    } catch (error) {
        console.error('Error fetching prescriptions:', error);
        return getMockPrescriptions();
    }
}

/**
 * Get mock prescription data for fallback
 * @returns {Array} Mock prescription data
 */
function getMockPrescriptions() {
    const today = new Date();
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    const lastMonth = new Date(today);
    lastMonth.setDate(lastMonth.getDate() - 30);
    
    return [
        {
            id: 1,
            medication: 'Amoxicillin',
            dosage: '500mg',
            frequency: 'Three times daily',
            startDate: lastWeek.toISOString().split('T')[0],
            endDate: addDays(lastWeek, 10).toISOString().split('T')[0],
            doctorName: 'Dr. Michael Chen',
            doctorSpecialty: 'General Practitioner',
            instructions: 'Take with food. Complete the full course even if symptoms improve.',
            status: 'Active',
            refills: 0,
            issueDate: lastWeek.toISOString().split('T')[0]
        },
        {
            id: 2,
            medication: 'Lisinopril',
            dosage: '10mg',
            frequency: 'Once daily',
            startDate: lastMonth.toISOString().split('T')[0],
            endDate: addDays(today, 60).toISOString().split('T')[0],
            doctorName: 'Dr. Sarah Johnson',
            doctorSpecialty: 'Cardiologist',
            instructions: 'Take in the morning with or without food.',
            status: 'Active',
            refills: 2,
            issueDate: lastMonth.toISOString().split('T')[0]
        },
        {
            id: 3,
            medication: 'Ibuprofen',
            dosage: '400mg',
            frequency: 'As needed for pain, not exceeding 3 times daily',
            startDate: lastMonth.toISOString().split('T')[0],
            endDate: lastWeek.toISOString().split('T')[0],
            doctorName: 'Dr. James Wilson',
            doctorSpecialty: 'Orthopedic Surgeon',
            instructions: 'Take with food to reduce stomach irritation. Do not take for more than 10 days.',
            status: 'Expired',
            refills: 0,
            issueDate: lastMonth.toISOString().split('T')[0]
        }
    ];
}

/**
 * Helper function to add days to a date
 * @param {Date} date - The date to add days to
 * @param {number} days - The number of days to add
 * @returns {Date} The new date
 */
function addDays(date, days) {
    const result = new Date(date);
    result.setDate(result.getDate() + days);
    return result;
}

/**
 * Get consultations for the current patient
 * @returns {Promise<Array>} Consultations data or mock data on error
 */
export async function getConsultations() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock consultation data');
            return getMockConsultations();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching patient consultations...');
        }

        const response = await fetch('/api/consultations', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Consultations response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Consultations endpoint not found (404), using mock data');
                return getMockConsultations();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockConsultations();
            } catch (jsonError) {
                // If JSON parsing fails, log the error and fall back to mock data
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockConsultations();
            }
        }

        try {
            const data = await response.json();
            return data.consultations || [];
        } catch (jsonError) {
            console.error('Error parsing consultations response:', jsonError);
            return getMockConsultations();
        }
    } catch (error) {
        console.error('Error fetching consultations:', error);
        // Fall back to mock data instead of throwing the error
        return getMockConsultations();
    }
}

/**
 * Get mock consultation data for fallback
 * @returns {Array} Mock consultation data
 */
function getMockConsultations() {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    const lastWeek = new Date(today);
    lastWeek.setDate(lastWeek.getDate() - 7);
    const twoWeeksAgo = new Date(today);
    twoWeeksAgo.setDate(twoWeeksAgo.getDate() - 14);
    
    return [
        {
            id: 1,
            doctorId: 101,
            doctorName: 'Dr. Sarah Johnson',
            doctorSpecialty: 'Cardiologist',
            date: yesterday.toISOString().split('T')[0],
            time: '10:30 AM',
            status: 'Completed',
            reason: 'Heart palpitations and chest discomfort',
            notes: 'EKG performed, results normal. Recommended stress test.',
            recommendations: 'Reduce caffeine intake, monitor blood pressure daily, schedule stress test.',
            attachments: [
                { name: 'EKG_Results.pdf', url: '/mock-files/ekg.pdf' }
            ],
            createdAt: lastWeek.toISOString()
        },
        {
            id: 2,
            doctorId: 102,
            doctorName: 'Dr. Michael Chen',
            doctorSpecialty: 'General Practitioner',
            date: lastWeek.toISOString().split('T')[0],
            time: '09:15 AM',
            status: 'Completed',
            reason: 'Annual physical examination',
            notes: 'All vitals normal. Blood work ordered.',
            recommendations: 'Continue current medications, follow up in 3 months.',
            attachments: [
                { name: 'Physical_Exam_Summary.pdf', url: '/mock-files/physical.pdf' },
                { name: 'Blood_Work_Order.pdf', url: '/mock-files/blood-work.pdf' }
            ],
            createdAt: lastWeek.toISOString()
        },
        {
            id: 3,
            doctorId: 103,
            doctorName: 'Dr. Emily Rodriguez',
            doctorSpecialty: 'Dermatologist',
            date: twoWeeksAgo.toISOString().split('T')[0],
            time: '02:00 PM',
            status: 'Completed',
            reason: 'Skin rash and itching',
            notes: 'Diagnosed with contact dermatitis. Prescribed topical steroid cream.',
            recommendations: 'Apply cream twice daily, avoid known allergens, follow up in 2 weeks if not improved.',
            attachments: [],
            createdAt: twoWeeksAgo.toISOString()
        }
    ];
}

/**
 * Schedule a new appointment for the patient
 * @param {Object} appointment - The appointment data
 * @returns {Promise<Object>} The created appointment or error response
 */
export async function scheduleAppointment(appointment) {
    try {
        // Only log detailed data in development
        if (process.env.NODE_ENV !== 'production') {
            console.log('Full appointment data received:', appointment);
        }
        
        // Handle both snake_case and camelCase field names
        const doctorId = appointment.doctorId || appointment.doctor_id;
        const reason = appointment.reason || appointment.reasonForVisit;
        const timeSlot = appointment.timeSlot || appointment.time_slot;
        const date = appointment.date || appointment.appointment_date;
        
        // Validate required fields
        if (!doctorId) {
            return {
                success: false,
                error: 'Please select a doctor',
                errorCode: 'VALIDATION_ERROR'
            };
        }
        if (!reason) {
            return {
                success: false,
                error: 'Please provide a reason for the appointment',
                errorCode: 'VALIDATION_ERROR'
            };
        }

        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, returning mock appointment response');
            return getMockScheduleAppointmentResponse(appointment);
        }

        const patientId = getCurrentUserId();
        if (!patientId) {
            console.warn('Could not determine patient ID from token, returning mock appointment response');
            return getMockScheduleAppointmentResponse(appointment);
        }

        // Map time slot to actual time ranges
        let startTime, endTime;
        switch(timeSlot) {
            case 'morning':
                startTime = '09:00';
                endTime = '12:00';
                break;
            case 'afternoon':
                startTime = '13:00';
                endTime = '17:00';
                break;
            case 'evening':
                startTime = '18:00';
                endTime = '21:00';
                break;
            default:
                startTime = '09:00';
                endTime = '12:00';
        }

        const appointmentData = {
            doctor_id: doctorId, // Using snake_case to match backend expectations
            patient_id: patientId,
            reason: reason,
            status: 'pending',  // Initial status is pending until doctor accepts
            time_slot: timeSlot || 'any',  // Patient's preferred time (morning/afternoon/evening)
            notes: appointment.notes || '',
            follow_up: appointment.followUp || false,
            date: date
        };

        // Log processed data in development only
        if (process.env.NODE_ENV !== 'production') {
            console.log('Processed appointment data:', appointmentData);
        }

        try {
            const response = await fetch('/api/appointments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
                body: JSON.stringify(appointmentData)
            });

            let responseData;
            try {
                // Try to get response as text first to help with debugging
                const responseText = await response.text();
                
                // Only log in development
                if (process.env.NODE_ENV !== 'production') {
                    console.log('Response from server:', responseText);
                }
                
                // Parse the text response as JSON
                responseData = responseText ? JSON.parse(responseText) : {};
            } catch (parseError) {
                console.error('Error parsing server response:', parseError);
                return {
                    success: false,
                    error: 'Invalid server response format',
                    errorCode: 'PARSE_ERROR'
                };
            }

            if (!response.ok) {
                console.error('Backend error details:', responseData);
                return {
                    success: false,
                    error: responseData.error || responseData.message || `Server error: ${response.status}`,
                    errorCode: responseData.errorCode || 'API_ERROR',
                    status: response.status
                };
            }

            return {
                success: true,
                data: responseData,
                message: 'Appointment scheduled successfully'
            };
        } catch (fetchError) {
            console.error('Network error in scheduleAppointment:', fetchError);
            // Fall back to mock data for network errors
            return getMockScheduleAppointmentResponse(appointment);
        }
    } catch (error) {
        console.error('Error in scheduleAppointment:', error);
        return {
            success: false,
            error: error.message || 'An unexpected error occurred',
            errorCode: 'UNKNOWN_ERROR'
        };
    }
}

/**
 * Generate a mock response for scheduling an appointment
 * @param {Object} appointment - The appointment data that was submitted
 * @returns {Object} A mock success response
 */
function getMockScheduleAppointmentResponse(appointment) {
    const now = new Date();
    const doctorId = appointment.doctorId || appointment.doctor_id || 101;
    const appointmentId = Math.floor(Math.random() * 10000) + 1;
    
    // Try to get doctor info from localStorage if available
    let doctorName = 'Dr. Sarah Johnson';
    let doctorSpecialty = 'Cardiologist';
    
    try {
        // Check if we have doctors data in localStorage
        const doctorsDataStr = localStorage.getItem('safe_doctors_data');
        if (doctorsDataStr) {
            const doctorsData = JSON.parse(doctorsDataStr);
            const doctor = doctorsData.find(d => d.id === doctorId || d.id === parseInt(doctorId));
            if (doctor) {
                doctorName = doctor.name || `Dr. ${doctor.firstName} ${doctor.lastName}`;
                doctorSpecialty = doctor.specialty;
            }
        }
    } catch (e) {
        console.warn('Could not retrieve doctor data from localStorage:', e);
    }
    
    return {
        success: true,
        message: 'Appointment scheduled successfully (mock data)',
        data: {
            id: appointmentId,
            doctor_id: doctorId,
            doctorName: doctorName,
            doctorSpecialty: doctorSpecialty,
            reason: appointment.reason || appointment.reasonForVisit || 'General checkup',
            status: 'pending',
            time_slot: appointment.timeSlot || appointment.time_slot || 'morning',
            date: appointment.date || appointment.appointment_date || new Date(now.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            notes: appointment.notes || '',
            follow_up: appointment.followUp || false,
            created_at: now.toISOString(),
            updated_at: now.toISOString()
        }
    };
}

/**
 * Get doctors available for the patient
 * @returns {Promise<Array>} Doctors data or mock data on error
 */
export async function getDoctors() {
    try {
        const token = getAuthToken();
        if (!token) {
            console.warn('Authentication token not found, using mock doctors data');
            return getMockDoctors();
        }

        if (process.env.NODE_ENV !== 'production') {
            console.log('Fetching available doctors...');
        }

        const response = await fetch('/api/doctors', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            }
        });

        if (process.env.NODE_ENV !== 'production') {
            console.log('Doctors response status:', response.status);
        }

        if (!response.ok) {
            if (response.status === 404) {
                console.warn('Doctors endpoint not found (404), using mock data');
                return getMockDoctors();
            }
            
            try {
                const errorData = await response.json();
                console.error(`API error: ${errorData.error || response.statusText}`);
                return getMockDoctors();
            } catch (jsonError) {
                console.error(`Failed to parse error response: ${jsonError.message}`);
                return getMockDoctors();
            }
        }

        try {
            const data = await response.json();
            return Array.isArray(data) ? data : (data.doctors || []);
        } catch (jsonError) {
            console.error('Error parsing doctors response:', jsonError);
            return getMockDoctors();
        }
    } catch (error) {
        console.error('Error fetching doctors:', error);
        return getMockDoctors();
    }
}

/**
 * Get mock doctors data for fallback
 * @returns {Array} Mock doctors data
 */
function getMockDoctors() {
    return [
        {
            id: 101,
            name: 'Dr. Sarah Johnson',
            specialty: 'Cardiologist',
            hospital: 'Main Hospital',
            rating: 4.8,
            experience: 12,
            image: '/images/doctors/doctor1.jpg',
            availability: ['Monday', 'Wednesday', 'Friday'],
            contact: {
                email: 'sarah.johnson@example.com',
                phone: '+1 (555) 123-4567'
            }
        },
        {
            id: 102,
            name: 'Dr. Michael Chen',
            specialty: 'General Practitioner',
            hospital: 'Medical Center',
            rating: 4.6,
            experience: 8,
            image: '/images/doctors/doctor2.jpg',
            availability: ['Monday', 'Tuesday', 'Thursday'],
            contact: {
                email: 'michael.chen@example.com',
                phone: '+1 (555) 234-5678'
            }
        },
        {
            id: 103,
            name: 'Dr. Emily Rodriguez',
            specialty: 'Dermatologist',
            hospital: 'Dermatology Clinic',
            rating: 4.9,
            experience: 15,
            image: '/images/doctors/doctor3.jpg',
            availability: ['Tuesday', 'Wednesday', 'Friday'],
            contact: {
                email: 'emily.rodriguez@example.com',
                phone: '+1 (555) 345-6789'
            }
        },
        {
            id: 104,
            name: 'Dr. James Wilson',
            specialty: 'Orthopedic Surgeon',
            hospital: 'Orthopedic Center',
            rating: 4.7,
            experience: 20,
            image: '/images/doctors/doctor4.jpg',
            availability: ['Monday', 'Thursday', 'Friday'],
            contact: {
                email: 'james.wilson@example.com',
                phone: '+1 (555) 456-7890'
            }
        }
    ];
}
